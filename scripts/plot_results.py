import os 
import glob
import argparse
import pandas as pd

import seaborn as sns
import matplotlib.pyplot as plt

import cpuinfo

usage = '''example:
     python3 plot_results.py -i '/path/to/dir benchmark csv files generated by launch_results_parser.py' 
          -config <path to benchmarking config settings
          -o <optional: path to output dir to save summary_results.csv>
     '''
parser = argparse.ArgumentParser(prog='plot_results.py',
                            description='Arrange row/column results data for plotting',
                            epilog=usage)
args = parser.add_argument_group('Options')
args.add_argument('-i', '--input_dir', help='Benchmark csv files directory path', required=True)
args.add_argument('-o', '--output_dir', help='Output results summary file .csv', required=False, type=str, default='result_summary.csv & plot_results.csv')

def main():
    args = parser.parse_args()
    for file_name in os.listdir(args.input_dir):
        model_name = file_name.split('.')[0]
        df = pd.read_csv(os.path.join(args.input_dir, file_name), encoding = "utf-8")
        df = df.sort_values('backend')
        df = df.sort_values('seq_len')
        
        cpu_info = cpuinfo.get_cpu_info()
        cpu_brand = cpu_info['brand_raw']
        num_cores = cpu_info['count']
                
        ########################################################################
        df.set_index('seq_len', inplace=True)

        latency_data = df.groupby('backend')['latency_mean (ms)']
        throughput_data = df.groupby('backend')['throughput']        
        #######################################################################################
        fig, (ax1, ax2) = plt.subplots(1, 2)
        plt.rcParams["figure.figsize"] = (20,20)
        latency_data.plot(ax=ax1, legend=True)
        throughput_data.plot(ax=ax2, legend=True)
        ax1.set_ylabel("latency_mean (ms)")
        ax2.set_ylabel("Throughput (frames/s)")

        ax1.grid(which='major', linestyle='-', linewidth='0.5', color='black')
        ax2.grid(which='major', linestyle='-', linewidth='0.5', color='black')

        plt.subplots_adjust(wspace=0.4)

        plt.title(f'Performance of {model_name} on \n {cpu_brand}, {num_cores} cores', loc='right')
        
        results_path = os.path.join(args.output_dir, f'{model_name}.png')
        plt.savefig(results_path)

        # for key, item in ydata:
        #     #print(ydata.get_group(key), "\n\n")
        #     print(f'{key}: {ydata.get_group(key)} \n')


if __name__ == '__main__':
    main()